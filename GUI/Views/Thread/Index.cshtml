@using System.Globalization
@using SD.HnD.DALAdapter.EntityClasses
@model SD.HnD.Gui.Models.ThreadData

@{
	ViewBag.Title = string.Format("HnD | {0}, Page {1}", Model.Thread.Subject, Model.PageNo);

	var nextPageButtonDisabledClass = string.Empty;
	var previousPageButtonDisabledClass = string.Empty;
	if(Model.PageNoNewerMessages < 1)
	{
		nextPageButtonDisabledClass = "disabled";
	}
	if(Model.PageNoOlderMessages < 1)
	{
		previousPageButtonDisabledClass = "disabled";
	}
}
<a id="top"></a>
<div class="container">
	<div class="row">
		<div class="col-sm-12 page-header-breadcrumbs">
			<ol class="breadcrumb plr0">
				<li><a href="~/">Home</a></li>
				<li>@Model.SectionName</li>
				<li><a href="~/Forum/@Model.Thread.ForumID/1">@Model.ForumName</a></li>
			</ol>
		</div>
	</div>
	<div class="row">
		<div class="col-sm-12 pt0 mt0">
			<h2 class="br-bottom pt0 mt0 mb0 pb0 subject">@Model.Thread.Subject</h2>
		</div>
	</div>
</div>
@if(Model.UserMayManageSupportQueueContents)
{
	<section class="as">
		<div class="container mt20">
			<div class="row">
				<div class="col-sm-12 as-header">
					Support Queue Management
				</div>
			</div>
			<div class="row as-row">
				<div class="col-sm-12">
					<div class="mb0 mt5">
						@if((Model.SupportQueueThreadInfo != null) && Model.SupportQueueThreadInfo.ClaimedByUserID.HasValue)
						{
							var claimDate = Model.SupportQueueThreadInfo.ClaimedOn ?? DateTime.Now;
							<form action="~/SupportQueue/ReleaseThread/@Model.Thread.ThreadID/@Model.PageNo" method="post" role="form" class="block-leftside pr40">
								@Html.AntiForgeryToken()
								<span class="as-label">
									Claimed by <a href="~/User/@Model.SupportQueueThreadInfo.ClaimedByUserID">@Model.SupportQueueThreadInfo.ClaimedByUser.NickName</a> on
									@claimDate.ToString("dd-MMM-yyyy HH:mm.ss", DateTimeFormatInfo.InvariantInfo)&nbsp;&nbsp;&nbsp;
								</span>
								<button class="btn btn-default mt5 plr20" id="releaseButton" type="submit"> Release </button>
							</form>
						}
						else
						{
							if(Model.ActiveQueue != null)
							{
								<form action="~/SupportQueue/ClaimThread/@Model.Thread.ThreadID/@Model.PageNo" method="post" role="form" class="block-leftside pr40">
									@Html.AntiForgeryToken()
									<span class="as-label">Not claimed</span>@Html.Raw("&nbsp;&nbsp;&nbsp;")
									@if(Model.SupportQueueThreadInfo != null)
									{
										<button class="btn btn-default mt5 plr20" id="claimButton" type="submit"> Claim </button>
									}
								</form>
							}
						}
						<form class="block-rightside form-inline" action="~/SupportQueue/MoveToQueue/@Model.Thread.ThreadID/@Model.PageNo" method="POST" role="form">
							@Html.AntiForgeryToken()
							<div class="form-group mt5">
								<select id="queueComboBox" name="queueId" class="form-control no-roundcorners">
									@{    var noQueueSelectedString = Model.ActiveQueue == null ? "selected" : string.Empty;
									}
									<option value="0" @noQueueSelectedString>Not in a queue</option>
									@foreach(var queue in Model.AllSupportQueues)
									{
										var selectedString = queue == Model.ActiveQueue ? "selected" : string.Empty;
										<option value="@queue.QueueID" @selectedString>@queue.QueueName</option>
									}
								</select>
							</div>
							<div class="form-group">
								&nbsp;
								<button class="btn btn-default mt5 plr20" id="claimButton" type="submit"> Set </button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</section>
	<section class="as">
		<div class="container mt20">
			<div class="row">
				<div class="col-sm-12 as-header">
					<a href="#@Html.Raw("MemoContents" + @Model.Thread.ThreadID)" data-toggle="collapse" aria-expanded="true" aria-controls="@Html.Raw("MemoContents" + @Model.Thread.ThreadID)" class="areatoggle fs-tooltip">
						<span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span>
						<span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span>
					</a>
					Memo&nbsp;&nbsp;&nbsp;
					<span class="pull-right">
						<a href="~/SupportQueue/EditMemo/@Model.Thread.ThreadID/@Model.PageNo" title="Edit memo" class="fs-tooltip"><i class="fa fa-pencil"></i></a>
					</span>
				</div>
			</div>
			<div class="row as-row collapse in" id="@Html.Raw("MemoContents" + @Model.Thread.ThreadID)">
				<div class="col-sm-12">@Html.Raw(Model.MemoAsHTML)</div>
			</div>
		</div>
	</section>
										}

<section class="fs mt20">
	<div class="container">
		<div class="row">
			<div class="col-sm-12 fs-header">
				<div class="container">
					<div class="row">
						<div class="col-sm-8 p0">
							<div class="fs-thread-header">
								<span class="plr7">Posts</span>&nbsp;&nbsp;&nbsp;
							</div>
							<div class="fs-thread-pager">@Html.Partial("MessagePager", Model)</div>
						</div>
						<div class="col-sm-4">
							<div class="threadtools pull-right">
								<div class="block-leftside">
									<span>&nbsp;</span>
									@if(Model.UserMayDoForumSpecificThreadManagement || Model.UserMayDoSystemWideThreadManagement)
									{
										<div class="btn-group pt3">
											<a href="#" class="fs-tooltip dropdown-toggle" data-toggle="dropdown" aria-expanded="false" title="Thread options">
												<span class="glyphicon glyphicon-cog" aria-hidden="true"></span>
											</a>&nbsp;
											<ul class="dropdown-menu menu submenu inpageDropDown" role="menu">
												@if(Model.UserMayDoSystemWideThreadManagement)
												{
													<li role="presentation"><a role="menuitem" tabindex="-1" href="#" data-toggle="modal" data-target="#moveThreadModal" title="Move thread">Move thread</a></li>
													<li role="presentation"><a role="menuitem" tabindex="-1" href="#" data-toggle="modal" data-target="#deleteThreadModal" title="Delete thread">Delete thread</a></li>
												}
												<li role="presentation"><a role="menuitem" tabindex="-1" href="#" data-toggle="modal" data-target="#editThreadPropertiesModal" title="Edit thread properties">Edit thread properties</a></li>
											</ul>
										</div>}
								</div>
								<div class="threadtools block-rightside">
									@{string dimmedClass = Model.Thread.MarkedAsDone ? string.Empty : "dimmed";
										if(Model.UserMayMarkThreadAsDone)
										{
											<form method="POST" role="form" class="block-leftside" action="~/Thread/ToggleMarkAsDone/@Model.Thread.ThreadID/@Model.PageNo" id="threadFlagsForm">
												<div class="threadtools">
													@Html.AntiForgeryToken()
													<a href="#" id="markDoneButton" class="fs-tooltip @dimmedClass" title="Mark thread as done"><i class="fa fa-check"></i></a>@Html.Raw("&nbsp; &nbsp;")
												</div>
											</form>}
										else
										{
											<i class="fa fa-check @dimmedClass"></i><span>&nbsp;&nbsp;</span>}
									}
									@if(Model.UserMayDoBasicThreadOperations)
									{
										string subscribedDimmedClass = Model.ThreadIsSubscribed ? string.Empty : "dimmed";
										string bookmarkedDimmedClass = Model.ThreadIsBookmarked ? string.Empty : "dimmed";
										<a href="#" id="subscribeButton" class="fs-tooltip @subscribedDimmedClass" title="Notify me of thread replies"><i class="fa fa-envelope-o"></i></a>@Html.Raw("&nbsp; &nbsp;")
										<a href="#" id="bookmarkButton" class="fs-tooltip @bookmarkedDimmedClass" title="Bookmark thread"><i class="fa fa-bookmark"></i></a>@Html.Raw("&nbsp; &nbsp;")
									}
									@if(Model.UserMayAddNewMessages)
									{
										<a href="~/Message/Add/@Model.Thread.ThreadID" class="fs-tooltip" title="New post"><i class="fa fa-plus"></i></a>@Html.Raw("&nbsp;")
									}
									@{// leave following nbsp; in the HTML to make sure Chrome knows this div is not empty, otherwise it will show 30px extra in the header. Why? Who knows!
									}
									<span>&nbsp;</span>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		@for(int i = 0; i < Model.ThreadMessages.Count; i++)
		{
			var currentMessage = Model.ThreadMessages[i];
			<a id="@currentMessage.MessageID"></a>
			<div class="row ps">
				<div class="col-sm-12 plr0">
					<div class="ps-poster" id="@Html.Raw("MessagePoster" + currentMessage.MessageID)">
						@if(!string.IsNullOrWhiteSpace(currentMessage.PostedByUser.IconURL))
						{
							var fullURL = "https://" + currentMessage.PostedByUser.IconURL;
							<img src="@fullURL" class="ps-poster-avatar" alt="@currentMessage.PostedByUser.NickName avatar" />
						}
						<div class="ps-poster-name">
							<a href="~/User/@currentMessage.PostedByUser.UserID">@currentMessage.PostedByUser.NickName</a><br />
							<span class="ps-poster-title">@currentMessage.PostedByUser.UserTitleDescription</span>
						</div>
						<div class="ps-poster-stats">
							<span class="ps-poster-info"><b>Posts:</b> @currentMessage.PostedByUser.AmountOfPostings</span><br />
							@if(currentMessage.PostedByUser.JoinDate.HasValue)
							{
								<span class="ps-poster-info"><b>Joined:</b> @currentMessage.PostedByUser.JoinDate.Value.ToString("dd-MMM-yyyy")</span>
								<br />
							}
							@if(Model.ShowIPAddresses)
							{
								<span class="ps-poster-info"><b>IP:</b> @currentMessage.PostedFromIP</span>
							}
						</div>
					</div>
					<div class="ps-message">
						<div class="ps-message-title">
							<div class="pull-left">
								<a href="~/Message/Goto/@currentMessage.MessageID">#</a> Posted on: @currentMessage.PostingDate.ToString("dd-MMM-yyyy HH:mm:ss")&nbsp;&nbsp;&nbsp;
								@if(Model.ShowDeleteMessageLink && ((Model.PageNo > 1) || (i > 0)))
								{
									<a href="#" data-toggle="modal" data-target="#confirmMessageDeleteModal" data-messageid="@currentMessage.MessageID" title="Delete post"><i class="fa fa-trash-o"></i></a>@Html.Raw("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
								}
							</div>
							<div class="ps-message-tools">
								@if(currentMessage.Attachments.Count > 0)
								{
									<a href="#" title="View Attachments"><span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span></a>@Html.Raw("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
								}
								@if(Model.ForumAllowsAttachments && Model.UserMayAddAttachments && (LoggedInUserAdapter.GetUserID() == currentMessage.PostedByUser.UserID))
								{
									<a href="#" title="Manage Attachments"><span class="glyphicon glyphicon-paperclip" aria-hidden="true"></span></a>@Html.Raw("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
								}
								@if(Model.ShowEditMessageLink || (!LoggedInUserAdapter.IsAnonymousUser() && (currentMessage.PostedByUser.UserID == LoggedInUserAdapter.GetUserID())))
								{
									<a href="~/Message/Edit/@currentMessage.MessageID" title="Edit post"><i class="fa fa-pencil"></i></a>@Html.Raw("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
								}
								@if(Model.ShowQuoteMessageLink)
								{
									<a href="~/Message/Add/@currentMessage.ThreadID/@currentMessage.MessageID" title="Quote and reply to post"><i class="fa fa-reply"></i></a>@Html.Raw("&nbsp;&nbsp;&nbsp;")
								}
							</div>
						</div>
						<div class="ps-message-content" id="@Html.Raw("MessageContents" + currentMessage.MessageID)">
							@Html.Raw(currentMessage.MessageTextAsHTML)
							@if(currentMessage.Attachments.Count > 0)
							{
								bool userMayManageAttachments = Model.UserMayManageOtherUsersAttachments || (currentMessage.PostedByUser.UserID == LoggedInUserAdapter.GetUserID());

								<table class="table mb0 mt20 table-condensed">
									<caption class="attachments-caption"><span>Attachments</span></caption>
									<thead>
										<tr>
											<th>&nbsp;</th>
											<th>Filename</th>
											<th>File size</th>
											<th>Added on</th>
											<th>Approval</th>
										</tr>
									</thead>
									<tbody>
										@foreach(var attachment in currentMessage.Attachments)
										{
											<tr>
												<td>
													@if(userMayManageAttachments)
													{
														<a href="#" data-toggle="modal" data-target="#confirmAttachmentDeleteModal" data-messageid="@currentMessage.MessageID" data-attachmentid="@attachment.AttachmentID" data-filename="@attachment.Filename" title="Download file '@attachment.Filename'"><i class="fa fa-trash-o"></i></a>
													}
													else
													{
														@Html.Raw("&nbsp;")
													}
												</td>
												<td>
													@if(attachment.Approved || Model.UserCanApproveAttachments)
													{
														<a href="~/Attachment/Get/@attachment.AttachmentID" target="_blank" title="Download file '@attachment.Filename'">@attachment.Filename</a>
													}
													else
													{
														@attachment.Filename
													}
												</td>
												<td>@attachment.Filesize.ToString("N0")</td>
												<td>@attachment.AddedOn.ToString("dd-MMM-yyyy HH:mm.ss", DateTimeFormatInfo.InvariantInfo)</td>
												<td>
													@if(Model.UserCanApproveAttachments)
													{
														string iconName = attachment.Approved ? "check-square-o" : "square-o";
														<a href="#" onclick="toggleAttachmentApproval(@currentMessage.MessageID, @attachment.AttachmentID);return false;" title="Toggle approval of attachment '@attachment.Filename'"><i class="fa fa-@iconName" id="icon_attachment_@attachment.AttachmentID"></i></a>
													}
													else
													{
														@Html.Raw(attachment.Approved ? "Approved" : "Pending")
													}
												</td>
											</tr>
										}
									</tbody>
								</table>
							}
						</div>
						<div class="ps-message-signature">
							@Html.Encode(currentMessage.PostedByUser.Signature)
							<div class="pull-right">
								<a href="#top" title="Go to top of page"><i class="fa fa-arrow-up"></i></a>
							</div>
						</div>
					</div>
				</div>
			</div>
		}

		@if(Model.NumberOfPages > 1)
		{
			<div class="row">
				<div class="col-sm-12 pull-center pt20">
					<a class="btn btn-sm btn-default @previousPageButtonDisabledClass" href="~/Thread/@Model.Thread.ThreadID/@Model.PageNoOlderMessages"><i class="fa fa-arrow-left"></i>&nbsp;&nbsp;Previous page </a>
					<a class="btn btn-sm btn-default @nextPageButtonDisabledClass" href="~/Thread/@Model.Thread.ThreadID/@Model.PageNoNewerMessages"> Next page&nbsp;&nbsp;<i class="fa fa-arrow-right"></i> </a>
				</div>
			</div>
		}
	</div>
</section>


@if(Model.ShowDeleteMessageLink)
{
	<div class="modal" id="confirmMessageDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmMessageDeleteModalLabel">
		<div class="row">
			<form action="~/Message/Delete/" method="post" role="form" id="confirmMessageDeleteForm">
				<input type="hidden" name="confirmMessageDeleteFormActionSave" id="confirmMessageDeleteFormActionSave" value="" />
				@Html.AntiForgeryToken()
				<div class="modal-dialog modal-lg" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 class="modal-title" id="confirmMessageDeleteModalLabel">Confirm message delete</h4>
						</div>
						<div class="mb0 pb0">
							<div class="col-sm-12 plr0 ps">
								<div class="ps-poster" id="confirmMessageDeleteModalMessagePoster">
								</div>
								<div class="ps-message">
									<div class="ps-message-content ps-message-modal" id="confirmMessageDeleteModalMessageContents">
									</div>
								</div>
							</div>
						</div>
						<div class="pull-center mb20">
							<button class="btn btn-default" type="submit" id="confirmMessageDeleteLink"> Delete </button>&nbsp;&nbsp;
							<a class="btn btn-primary" data-dismiss="modal">&nbsp;&nbsp;Keep&nbsp;&nbsp;</a>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>
}
@if(Model.UserMayDoSystemWideThreadManagement)
{
	<div class="modal" id="moveThreadModal" tabindex="-1" role="dialog" aria-labelledby="moveThreadModalLabel">
		<div class="row">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="moveThreadModalLabel">Move thread</h4>
					</div>
					<form action="~/Thread/Move/@Model.Thread.ThreadID" method="post" role="form" class="form-inline">
						@Html.AntiForgeryToken()
						<div class="col-sm-12 pb20 pt20">
							<div class="row">
								<div class="col-sm-12">
									To move the thread <strong>'@Model.Thread.Subject'</strong> to a different forum, please select the forum below to which you want to move the thread to and
									click <em>Move</em>.
								</div>
							</div>
							<div class="row pt30">
								<div class="col-sm-3 plr10">
									<span class="pull-right pt3">Section </span>
								</div>
								<div class="col-sm-9 plr0">
									<select id="moveThreadSectionComboBox" class="form-control no-roundcorners" name="newSectionId">
										<option value="0" selected>Please select a section...</option>
										@foreach(SectionEntity s in CacheManager.GetAllSections())
										{
											<option value="@s.SectionID">@s.SectionName</option>
										}
									</select>
								</div>
							</div>
							<div class="row pt10" id="moveThreadForumSelectorPlaceHolder">
							</div>
						</div>
						<div class="pull-center mb20 pt20">
							<button type="submit" class="btn btn-primary btn-default disabled" id="moveThreadModalLink">&nbsp;&nbsp;Move&nbsp;&nbsp;</button>&nbsp;&nbsp;
							<a class="btn btn-default" data-dismiss="modal">&nbsp;Cancel&nbsp;</a>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>

	<div class="modal" id="confirmAttachmentDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmAttachmentDeleteModalLabel">
		<div class="row">
			<form action="~/Attachment/Delete/" method="post" role="form" id="confirmAttachmentDeleteForm">
				<input type="hidden" name="confirmAttachmentDeleteFormActionSave" id="confirmAttachmentDeleteFormActionSave" value="" />
				@Html.AntiForgeryToken()
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 class="modal-title" id="confirmAttachmentDeleteModalLabel">Confirm attachment delete</h4>
						</div>
						<div class="col-sm-12 mt10 mb20">
							Are you sure you want to delete the attachment: '<span id="confirmAttachmentDeleteModalFilename"></span>' ?
						</div>
						<div class="pull-center mb20">
							<button class="btn btn-default" type="submit" id="confirmAttachmentDeleteLink"> Delete </button>&nbsp;&nbsp;
							<a class="btn btn-primary" data-dismiss="modal" onclick="">&nbsp;&nbsp;Keep&nbsp;&nbsp;</a>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>

	<div class="modal" id="deleteThreadModal" tabindex="-1" role="dialog" aria-labelledby="deleteThreadModalLabel">
		<div class="row">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="deleteThreadModalLabel">Delete thread</h4>
					</div>
					<form action="~/Thread/Delete/@Model.Thread.ThreadID" method="post" role="form" class="form-inline">
						@Html.AntiForgeryToken()
						<div class="col-sm-12 pb20 pt20">
							<div class="row">
								<div class="col-sm-12">
									To delete the thread <strong>'@Model.Thread.Subject'</strong>, please click <em>Delete</em>. To keep the thread, click <em>Keep</em>
								</div>
							</div>
						</div>
						<div class="pull-center mb20 pt20">
							<button type="submit" class="btn btn-default" id="deleteThreadModalLink">&nbsp;&nbsp;Delete&nbsp;&nbsp;</button>&nbsp;&nbsp;
							<a class="btn btn-default btn-primary" data-dismiss="modal">&nbsp;Keep&nbsp;</a>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>


	<div class="modal" id="editThreadPropertiesModal" tabindex="-1" role="dialog" aria-labelledby="editThreadPropertiesModalLabel">
		<div class="row">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="editThreadPropertiesModalLabel">Edit thread properties</h4>
					</div>
					<div class="modal-body">
						<form action="~/Thread/EditProperties/@Model.Thread.ThreadID" method="post" role="form" class="form-horizontal">
							@Html.AntiForgeryToken()
							<div class="form-group">
								<label for="subjectTextBox" class="col-sm-2 plr20 pt3">Subject</label>
								<div class="col-sm-9">
									<input size="60" class="form-control" data-val="true" data-val-maxlength="The field Subject must be a string or array type with a maximum length of &#39;250&#39;."
										   data-val-maxlength-max="250" data-val-required="The Subject field is required." id="subjectTextBox" name="Subject" type="text" value="@Model.Thread.Subject" />
									<span class="field-validation-valid text-danger" data-valmsg-for="Subject" data-valmsg-replace="true"></span>
								</div>
							</div>
							<div class="form-group pt0">
								<label class="col-sm-offset-2 col-sm-9">
									@Html.CheckBoxFor(m => m.IsClosed)
									Is closed
								</label>
							</div>
							<div class="form-group pt0">
								<label class="col-sm-offset-2 col-sm-9">
									@Html.CheckBoxFor(m => m.IsSticky)
									Is sticky / pinned
								</label>
							</div>
							<div class="pull-center mb20 pt20">
								<button type="submit" class="btn btn-default btn-primary" id="updateThreadPropertiesModalLink">&nbsp;&nbsp;Update&nbsp;&nbsp;</button>&nbsp;&nbsp;
								<a class="btn btn-default" data-dismiss="modal">&nbsp;Cancel&nbsp;</a>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@section scripts
{
	<script type="text/javascript">
		// handling logic for attachment delete modal dialog
		$('#confirmAttachmentDeleteModal').on('show.bs.modal',
			function (event) {
				var button = $(event.relatedTarget); // Button that triggered the modal
				var messageid = button.data('messageid');
				var attachmentid = button.data('attachmentid');
				var filename = button.data('filename');
				$('#confirmAttachmentDeleteModalFilename').html(filename);
				$('#confirmAttachmentDeleteFormActionSave').attr('value', $('#confirmAttachmentDeleteForm').attr('action'));
				$('#confirmAttachmentDeleteForm').attr('action', $('#confirmAttachmentDeleteForm').attr('action') + messageid + "/" + attachmentid);
			});

		$('#confirmAttachmentDeleteModal').on('hide.bs.modal',
			function (event) {
				$('#confirmAttachmentDeleteForm').attr('action', $('#confirmAttachmentDeleteFormActionSave').attr('value'));
			});
	</script>

	@if(Model.ShowDeleteMessageLink)
	{
		<script type="text/javascript">
			$('#confirmMessageDeleteModal').on('show.bs.modal',
				function (event) {
					var button = $(event.relatedTarget); // Button that triggered the modal
					var messageid = button.data('messageid');
					$('#confirmMessageDeleteModalMessageContents').html($('#MessageContents' + messageid).html());
					$('#confirmMessageDeleteModalMessagePoster').html($('#MessagePoster' + messageid).html());
					$('#confirmMessageDeleteFormActionSave')
						.attr('value', $('#confirmMessageDeleteForm').attr('action'));
					$('#confirmMessageDeleteForm').attr('action',
						$('#confirmMessageDeleteForm').attr('action') + messageid);
				});

			$('#confirmMessageDeleteModal').on('hide.bs.modal',
				function (event) {
					$('#confirmMessageDeleteForm').attr('action', $('#confirmMessageDeleteFormActionSave').attr('value'));
				});
		</script>
	}
	@if(Model.UserMayDoSystemWideThreadManagement)
	{
		<script type="text/javascript">
			$('#moveThreadSectionComboBox').change(function () {
				var selectedSectionID = $(this).val();
				if (selectedSectionID > 0) {
					$.get('@ApplicationAdapter.GetVirtualRoot()Section/Forums/' + selectedSectionID, function (data) {
						$('#moveThreadForumSelectorPlaceHolder').html(data);
						$('#moveThreadForumSelectorPlaceHolder').fadeIn('fast');
						$('#moveThreadModalLink').removeClass("disabled");
					});
				} else {
					$('#moveThreadForumSelectorPlaceHolder').html("");
					$('#moveThreadForumSelectorPlaceHolder').fadeOut('fast');
					$('#moveThreadModalLink').addClass("disabled");
				}
			});
		</script>
	}
	@if(Model.UserMayMarkThreadAsDone)
	{
		<script type="text/javascript">
			$('#markDoneButton').bind("click", function () {
				$('#threadFlagsForm').submit();
			})
		</script>
	}
	@if(Model.UserMayDoBasicThreadOperations)
	{
		<script type="text/javascript">
			$('#subscribeButton').bind("click", function () {
				performAjaxToggleCall('@ApplicationAdapter.GetVirtualRoot()Thread/ToggleSubscribe/@Model.Thread.ThreadID',
					function(result) {
						handleThreadToggleAjaxCallResult('#subscribeButton', result);
					});
			});
			$('#bookmarkButton').bind("click", function () {
				performAjaxToggleCall('@ApplicationAdapter.GetVirtualRoot()Thread/ToggleBookmark/@Model.Thread.ThreadID',
					function (result) {
						handleThreadToggleAjaxCallResult('#bookmarkButton', result);
					});
			});

			// The buttonId is the id of the element which should have its state toggled visually by appending/removing the 'dimmed' css class.
			function handleThreadToggleAjaxCallResult(buttonId, result)
			{
				if (result.success) {
					if (result.newstate) {
						$(buttonId).removeClass("dimmed");
					} else {
						$(buttonId).addClass("dimmed");
					}
				}
			}
		</script>
	}
	@if(Model.UserCanApproveAttachments)
	{
		<script type="text/javascript">
			function toggleAttachmentApproval(messageId, attachmentId) {
				performAjaxToggleCall('@ApplicationAdapter.GetVirtualRoot()Attachment/ToggleApproval/' + messageId + '/' + attachmentId,
					function (result) {
								if (result.success) {
									$('#icon_attachment_' + attachmentId).attr('class', result.newstate ? 'fa fa-check-square-o' : 'fa fa-square-o');
								}
				});
			}
		</script>
	}
}